/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Timetable } from "./Timetable";
import { TimetableCountArgs } from "./TimetableCountArgs";
import { TimetableFindManyArgs } from "./TimetableFindManyArgs";
import { TimetableFindUniqueArgs } from "./TimetableFindUniqueArgs";
import { CreateTimetableArgs } from "./CreateTimetableArgs";
import { UpdateTimetableArgs } from "./UpdateTimetableArgs";
import { DeleteTimetableArgs } from "./DeleteTimetableArgs";
import { TimetableService } from "../timetable.service";
@graphql.Resolver(() => Timetable)
export class TimetableResolverBase {
  constructor(protected readonly service: TimetableService) {}

  async _timetablesMeta(
    @graphql.Args() args: TimetableCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Timetable])
  async timetables(
    @graphql.Args() args: TimetableFindManyArgs
  ): Promise<Timetable[]> {
    return this.service.timetables(args);
  }

  @graphql.Query(() => Timetable, { nullable: true })
  async timetable(
    @graphql.Args() args: TimetableFindUniqueArgs
  ): Promise<Timetable | null> {
    const result = await this.service.timetable(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Timetable)
  async createTimetable(
    @graphql.Args() args: CreateTimetableArgs
  ): Promise<Timetable> {
    return await this.service.createTimetable({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Timetable)
  async updateTimetable(
    @graphql.Args() args: UpdateTimetableArgs
  ): Promise<Timetable | null> {
    try {
      return await this.service.updateTimetable({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Timetable)
  async deleteTimetable(
    @graphql.Args() args: DeleteTimetableArgs
  ): Promise<Timetable | null> {
    try {
      return await this.service.deleteTimetable(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
