/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LibraryItem } from "./LibraryItem";
import { LibraryItemCountArgs } from "./LibraryItemCountArgs";
import { LibraryItemFindManyArgs } from "./LibraryItemFindManyArgs";
import { LibraryItemFindUniqueArgs } from "./LibraryItemFindUniqueArgs";
import { CreateLibraryItemArgs } from "./CreateLibraryItemArgs";
import { UpdateLibraryItemArgs } from "./UpdateLibraryItemArgs";
import { DeleteLibraryItemArgs } from "./DeleteLibraryItemArgs";
import { LibraryItemService } from "../libraryItem.service";
@graphql.Resolver(() => LibraryItem)
export class LibraryItemResolverBase {
  constructor(protected readonly service: LibraryItemService) {}

  async _libraryItemsMeta(
    @graphql.Args() args: LibraryItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LibraryItem])
  async libraryItems(
    @graphql.Args() args: LibraryItemFindManyArgs
  ): Promise<LibraryItem[]> {
    return this.service.libraryItems(args);
  }

  @graphql.Query(() => LibraryItem, { nullable: true })
  async libraryItem(
    @graphql.Args() args: LibraryItemFindUniqueArgs
  ): Promise<LibraryItem | null> {
    const result = await this.service.libraryItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LibraryItem)
  async createLibraryItem(
    @graphql.Args() args: CreateLibraryItemArgs
  ): Promise<LibraryItem> {
    return await this.service.createLibraryItem({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LibraryItem)
  async updateLibraryItem(
    @graphql.Args() args: UpdateLibraryItemArgs
  ): Promise<LibraryItem | null> {
    try {
      return await this.service.updateLibraryItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LibraryItem)
  async deleteLibraryItem(
    @graphql.Args() args: DeleteLibraryItemArgs
  ): Promise<LibraryItem | null> {
    try {
      return await this.service.deleteLibraryItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
