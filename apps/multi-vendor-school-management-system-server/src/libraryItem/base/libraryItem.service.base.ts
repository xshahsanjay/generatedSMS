/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, LibraryItem as PrismaLibraryItem } from "@prisma/client";

export class LibraryItemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LibraryItemCountArgs, "select">
  ): Promise<number> {
    return this.prisma.libraryItem.count(args);
  }

  async libraryItems(
    args: Prisma.LibraryItemFindManyArgs
  ): Promise<PrismaLibraryItem[]> {
    return this.prisma.libraryItem.findMany(args);
  }
  async libraryItem(
    args: Prisma.LibraryItemFindUniqueArgs
  ): Promise<PrismaLibraryItem | null> {
    return this.prisma.libraryItem.findUnique(args);
  }
  async createLibraryItem(
    args: Prisma.LibraryItemCreateArgs
  ): Promise<PrismaLibraryItem> {
    return this.prisma.libraryItem.create(args);
  }
  async updateLibraryItem(
    args: Prisma.LibraryItemUpdateArgs
  ): Promise<PrismaLibraryItem> {
    return this.prisma.libraryItem.update(args);
  }
  async deleteLibraryItem(
    args: Prisma.LibraryItemDeleteArgs
  ): Promise<PrismaLibraryItem> {
    return this.prisma.libraryItem.delete(args);
  }
}
