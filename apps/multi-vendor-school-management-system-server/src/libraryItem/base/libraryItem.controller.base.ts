/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LibraryItemService } from "../libraryItem.service";
import { LibraryItemCreateInput } from "./LibraryItemCreateInput";
import { LibraryItem } from "./LibraryItem";
import { LibraryItemFindManyArgs } from "./LibraryItemFindManyArgs";
import { LibraryItemWhereUniqueInput } from "./LibraryItemWhereUniqueInput";
import { LibraryItemUpdateInput } from "./LibraryItemUpdateInput";

export class LibraryItemControllerBase {
  constructor(protected readonly service: LibraryItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LibraryItem })
  async createLibraryItem(
    @common.Body() data: LibraryItemCreateInput
  ): Promise<LibraryItem> {
    return await this.service.createLibraryItem({
      data: data,
      select: {
        author: true,
        availabilityStatus: true,
        createdAt: true,
        id: true,
        publishDate: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LibraryItem] })
  @ApiNestedQuery(LibraryItemFindManyArgs)
  async libraryItems(@common.Req() request: Request): Promise<LibraryItem[]> {
    const args = plainToClass(LibraryItemFindManyArgs, request.query);
    return this.service.libraryItems({
      ...args,
      select: {
        author: true,
        availabilityStatus: true,
        createdAt: true,
        id: true,
        publishDate: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LibraryItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async libraryItem(
    @common.Param() params: LibraryItemWhereUniqueInput
  ): Promise<LibraryItem | null> {
    const result = await this.service.libraryItem({
      where: params,
      select: {
        author: true,
        availabilityStatus: true,
        createdAt: true,
        id: true,
        publishDate: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LibraryItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLibraryItem(
    @common.Param() params: LibraryItemWhereUniqueInput,
    @common.Body() data: LibraryItemUpdateInput
  ): Promise<LibraryItem | null> {
    try {
      return await this.service.updateLibraryItem({
        where: params,
        data: data,
        select: {
          author: true,
          availabilityStatus: true,
          createdAt: true,
          id: true,
          publishDate: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LibraryItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLibraryItem(
    @common.Param() params: LibraryItemWhereUniqueInput
  ): Promise<LibraryItem | null> {
    try {
      return await this.service.deleteLibraryItem({
        where: params,
        select: {
          author: true,
          availabilityStatus: true,
          createdAt: true,
          id: true,
          publishDate: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
